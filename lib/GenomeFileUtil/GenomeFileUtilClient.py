# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class GenomeFileUtil(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def genbank_to_genome(self, params, context=None):
        """
        :param params: instance of type "GenbankToGenomeParams" -> structure:
           parameter "file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "ftp_url" of
           String, parameter "genome_name" of String, parameter
           "workspace_name" of String, parameter "source" of String,
           parameter "taxon_wsname" of String
        :returns: instance of type "GenomeSaveResult" -> structure: parameter
           "genome_ref" of String
        """
        return self._client.call_method(
            'GenomeFileUtil.genbank_to_genome',
            [params], self._service_ver, context)

    def genome_to_gff(self, params, context=None):
        """
        :param params: instance of type "GenomeToGFFParams" -> structure:
           parameter "genome_ref" of String, parameter "ref_path_to_genome"
           of list of String
        :returns: instance of type "GenomeToGFFResult" (from_cache is 1 if
           the file already exists and was just returned, 0 if the file was
           generated during this call.) -> structure: parameter "gff_file" of
           type "File" -> structure: parameter "path" of String, parameter
           "shock_id" of String, parameter "ftp_url" of String, parameter
           "from_cache" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        """
        return self._client.call_method(
            'GenomeFileUtil.genome_to_gff',
            [params], self._service_ver, context)

    def TranslateNucToProtSeq(self, params, context=None):
        """
        :param params: instance of type "TranslateNucToProtSeq_Params"
           (TranslateNucToProtSeq()) -> structure: parameter "nuc_seq" of
           String, parameter "genetic_code" of String
        :returns: instance of type "TranslateNucToProtSeq_Output" ->
           structure: parameter "prot_seq" of String
        """
        return self._client.call_method(
            'GenomeFileUtil.TranslateNucToProtSeq',
            [params], self._service_ver, context)

    def GenomeToFASTA(self, params, context=None):
        """
        :param params: instance of type "GenomeToFASTA_Params"
           (GenomeToFASTA()) -> structure: parameter "genome_ref" of type
           "data_obj_ref", parameter "file" of type "path_type", parameter
           "dir" of type "path_type", parameter "console" of list of type
           "log_msg", parameter "invalid_msgs" of list of type "log_msg",
           parameter "residue_type" of String, parameter "feature_type" of
           String, parameter "record_id_pattern" of type "pattern_type",
           parameter "record_desc_pattern" of type "pattern_type", parameter
           "case" of String, parameter "linewrap" of Long
        :returns: instance of type "GenomeToFASTA_Output" -> structure:
           parameter "fasta_file_path" of type "path_type", parameter
           "feature_ids" of list of type "feature_id"
        """
        return self._client.call_method(
            'GenomeFileUtil.GenomeToFASTA',
            [params], self._service_ver, context)

    def GenomeSetToFASTA(self, params, context=None):
        """
        :param params: instance of type "GenomeSetToFASTA_Params"
           (GenomeSetToFASTA()) -> structure: parameter "genomeSet_ref" of
           type "data_obj_ref", parameter "file" of type "path_type",
           parameter "dir" of type "path_type", parameter "console" of list
           of type "log_msg", parameter "invalid_msgs" of list of type
           "log_msg", parameter "residue_type" of String, parameter
           "feature_type" of String, parameter "record_id_pattern" of type
           "pattern_type", parameter "record_desc_pattern" of type
           "pattern_type", parameter "case" of String, parameter "linewrap"
           of Long, parameter "merge_fasta_files" of type "true_false"
        :returns: instance of type "GenomeSetToFASTA_Output" -> structure:
           parameter "fasta_file_path_list" of list of type "path_type",
           parameter "feature_ids_by_genome_id" of mapping from type
           "genome_id" to list of type "feature_id"
        """
        return self._client.call_method(
            'GenomeFileUtil.GenomeSetToFASTA',
            [params], self._service_ver, context)

    def FeatureSetToFASTA(self, params, context=None):
        """
        :param params: instance of type "FeatureSetToFASTA_Params"
           (FeatureSetToFASTA()) -> structure: parameter "featureSet_ref" of
           type "data_obj_ref", parameter "file" of type "path_type",
           parameter "dir" of type "path_type", parameter "console" of list
           of type "log_msg", parameter "invalid_msgs" of list of type
           "log_msg", parameter "residue_type" of String, parameter
           "feature_type" of String, parameter "record_id_pattern" of type
           "pattern_type", parameter "record_desc_pattern" of type
           "pattern_type", parameter "case" of String, parameter "linewrap"
           of Long
        :returns: instance of type "FeatureSetToFASTA_Output" -> structure:
           parameter "fasta_file_path" of type "path_type", parameter
           "feature_ids_by_genome_ref" of mapping from type "data_obj_ref" to
           list of type "feature_id"
        """
        return self._client.call_method(
            'GenomeFileUtil.FeatureSetToFASTA',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('GenomeFileUtil.status',
            [], self._service_ver, context)
